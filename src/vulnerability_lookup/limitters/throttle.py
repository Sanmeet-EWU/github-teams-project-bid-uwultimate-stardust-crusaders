"""Module containing the throttle based limitter class."""

from vulnerability_lookup.limitters._base import LimitExceededError
from vulnerability_lookup.limitters.abc_limitter import ABCLimitter

_MAX_REQUESTS_BEFORE_THROTTLE = 5
_THROTTLE_SPAN_IN_SECONDS = 60


class Throttle(ABCLimitter):
    """Class representation of a throttle based limitter.

    A throttle based limitter will allow any number of requests 
    up to the designated limit before the calls begin to be throttled. 
    In other words the calls will be slowed down to match the maximum 
    alloted rate, if the rate exceeds that which is allowed.
    """

    def __init__(self):
        """Create a new throttle based limitter."""

    def can_send(self) -> bool:
        """Check if a request can be sent, otherwise throttle."""

    def limit():
        """TODO"""
        raise LimitExceededError(
            "Given throttle has hit it's limit, can call next in {} seconds.")
