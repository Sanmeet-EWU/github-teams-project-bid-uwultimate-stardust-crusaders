"""Module containining the CVE related API."""

from enum import Enum, auto
import requests
from requests import Response

_CVE_BASE_URL = "https://cveawg.mitre.org/api"
_DEFAULT_CVE_API_TIMEOUT_IN_MS = 500 

class CVEException(Exception):
    """Base class for CVE related exceptions."""


class CVEInternalServerError(CVEException):
    """Exception representing an internal issue with the CVE API."""


class CVETimeoutException(CVEException):
    """Exception representing a timeout in the CVE API."""


class CVENotFoundException(CVEException):
    """Exception for when a CVE could not be found."""


class CVETooManyRequestsException(CVEException):
    """Exception for when the API limit has been exceeded."""


class CVEBadRequestException(CVEException):
    """Exception for when a bad request has been given as an CVE API call."""


class CVEForbiddenException(CVEException):
    """Exception for when trying to retrieve a forbidden CVE."""


class CVESeverity(Enum):
    """Enum representation of a CVE's severity.

    Uses cvssV3 standards.
    See: https://www.first.org/cvss/v3.0/specification-document
    """
    LOW = auto()
    MEDIUM = auto()
    HIGH = auto()
    CRITICAL = auto()


class _CVEMetadata:
    """Data class representing CVE metadata."""

    def __init__(
            self,
            assigner_org_id: str,
            cve_id: str,
            state: str,
            assigner_short_name: str,
            requester_user_id: str,
            date_reserved: str,
            date_published: str):
        """Create new metadata for a CVE."""
        self.assigned_org_id = assigner_org_id
        self.cve_id = cve_id
        self.state = state 
        self.assigner_short_name = assigner_short_name
        self.requester_user_id = requester_user_id 
        self.date_reserved = date_reserved
        self.date_published = date_published


class CVE:
    """Data class representation of "Common Vulnerabilities and Exposures".

    See:
    https://csrc.nist.gov/glossary/term/common_vulnerabilities_and_exposures
    for more details.
    """

    def __init__(
            self,
            json_response: dict):
        """Create a new CVE.

        NOTE: The CVE class should not be directly instantiated,
        if you wish to get a CVE, refer to the classmethod(s) to find
        a cve using the CVE API.

        Choosing to directly instantiate a CVE may lead to undefined
        behavior, including but not limitted to API throttling.

        For details on this implementation see:
        https://github.com/CVEProject/cve-schema/blob/master/schema/CVE_Record_Format.json        
        """
        #self.cve_id = cve_id
        #self.meta = _CVEMetadata()

    @classmethod
    def find_cve_from_id(
            cls,
            cve_id: str,
            timeout: int = _DEFAULT_CVE_API_TIMEOUT_IN_MS):
        """Find a CVE from a given CVE ID.

        See: https://cveawg.mitre.org/api-docs/#/
        for more information.

        Args:
            cve_id (str):
                String representation of the CVE ID to find
                using the CVE API.
            timeout (int):
                The timeout for the request, in miliseconds.

        Raises:
            CVEException:
                Raises one of the CVE Exception subclasses depending
                on the type of error that was encountered.
        """
        url = _CVE_BASE_URL + "/cve/" + cve_id
        response: Response = requests.get(
            url,
            timeout=timeout
        )
        if not response:
            raise CVETimeoutException(
                f"The request to {url} has timed out."
            )
        else:
            # TODO: Use these later, maybe.
            # limit = response.headers.get("RateLimit-Limit")
            # policy = response.headers.get("RateLimit-Policy")
            # remaining = response.headers.get("RateLimit-Remaining")
            # reset = response.headers.get("RateLimit-Reset")
            if response.status_code == 500:
                # TODO: Maybe add a check for the server health as part of this
                # error code?
                raise CVEInternalServerError(
                    "There was an issue with the CVE API server. Please try "
                    "again later."
                )
            elif response.status_code >= 400 and response.status_code < 500:
                if response.status_code == 400:
                    raise CVEBadRequestException(
                        f"Tried to send a bad CVE API request with form {url}."
                    )
                elif response.status_code == 403:
                    raise CVEForbiddenException(
                        f"Tried to access a forbidden CVE with request {url}."
                    )
                elif response.status_code == 404:
                    raise CVEForbiddenException(
                        f"Could not find the given API url: {url}."
                    )
                elif response.status.code == 429:
                    raise CVETooManyRequestsException(
                        "Tried to send too many API requests within the "
                        f"allowed timeframe using url {url}"
                    )
                else:
                    raise CVEException(
                        "Encountered an unexpected status code "
                        f"{response.status_code} with url {url}."
                    )
            elif response.status_code == 200:
                json_response = response.json()
                if not json_response:
                    raise CVEException(
                        "CVE Response is not a valid JSON data type: "
                        f"{response.raw}"
                    )
                else:
                    pass
            else:
                raise CVEException(
                    "Encountered an unexpected status code "
                    f"{response.status_code} with url {url}."
                )
