"""Module containing the Common Platform Enumeration."""

from enum import Enum
from typing import Optional

import requests
from requests import Response

from vulnerability_lookup.cve import CVE, CVESeverity

_INTERNAL_CPE_VERSION = "2.3"


class CPEPart(Enum):
    """Enum representation of a CPE Part definition."""
    APPLICATION = "a"
    HARDWARE = "h"
    OPERATING_SYSTEM = "o"
    ANY = "*"


class CPE:
    """Class representation of a V2.3 Common Platform Enumeration

    A version 2.3 CPE, as defined by NIST shall be in the format:
        cpe:<cpe_version>:<part>:<vendor>:<product>:<version>:<update>:
        <edition>:<language>:<sw_edition>:<target_sw>:<target_hw>:<other>

    For usage with NMAP see:
    https://nmap.org/book/output-formats-cpe.html 
    https://nmap.org/book/osdetect-usage.html
    """

    def __init__(
        self,
        part: CPEPart | str = CPEPart.ANY,
        vendor: str = "*",
        product: str = "*",
        major_version: str = "*",
        minor_version: Optional[str] = "*",
        edition: Optional[str] = "*",
        language_tag: Optional[str] = "*",
        sw_edition: Optional[str] = "*",
        target_sw: Optional[str] = "*",
        target_hw: Optional[str] = "*"
    ):
        """Create a new Common Platform Enumeration object."""
        self.part = part if isinstance(part, CPEPart) else CPEPart(part)
        self.vendor = vendor
        self.product = product
        self.major_version = major_version
        self.minor_version = minor_version
        self.edition = edition
        self.language_tag = language_tag
        self.sw_edition = sw_edition
        self.target_sw = target_sw
        self.target_hw = target_hw

    @classmethod
    def create_from_str(cls, cpe: str):
        """Create a new CPE from a cpe string."""
        spl = cpe.split(":")
        part = CPEPart(spl[1].replace("/", ""))
        return cls(part, *spl[2:])

    def find_related_cves(
        self,
        severity: Optional[CVESeverity] = None
    ) -> tuple[CVE]:
        """Find all CVE's related to this CPE object.

        Args:
            severity (Optional[CVESeverity]):
                The optional CVE severity level to look for. Only
                CVE's with the matching severity level will be returned.

        Returns:
            tuple[CVE]: A tuple of corresponding CVEs.
        """
        print("Getting response...", str(self))
        response: Response = requests.get(
            "https://services.nvd.nist.gov/rest/json/cves/2.0",
            params={"virtualMatchString": str(self), "resultsPerPage": 10},
            headers={"apiKey": "4faf9c6f-eb90-4c3e-834d-2c04d686bba1"},
            timeout=1000
        )
        print(response.url)
        print("STATUS:", response.status_code)
        return response.json() if response.status_code == 200 else {}

    def __str__(self) -> str:
        """CPE string representation."""
        return ":".join(
            filter(None, (
                "cpe",
                _INTERNAL_CPE_VERSION,
                self.part.value,
                self.vendor,
                self.product,
                self.major_version,
                self.minor_version,
                self.edition,
                self.language_tag,
                self.sw_edition,
                self.target_sw,
                self.target_hw
            ))
        )
